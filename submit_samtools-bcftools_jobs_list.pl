#perl! -w

###takes as input a list of sorted deduplicated bam files generated by "submit_bwa_jobs_list.pl" 
#ex:
#file1.sorted.dedup.bam
#file2.sorted.dedup.bam

###The slurm submission file should contain everything you need to include in your slurm batch command except for the commands to run the job, those will be added by this script

###assumes that samtools and bcftools are globally available, need to edit commands in script if they are not

###give the genome assembly used for mapping, make sure you have already generated a faidx file with samtools faidx genome_name

###list of targets to run bcftools's mpileup on, must contain one scaffold name per line

###also give the absolute path to GATK jars, leave blank if globally installed  

if(@ARGV<4){
    print "perl submit_gatk-indel-hc_jobs_list.pl list_of_sorted_bam_files slurm_submission_file_to_use genome_assembly_used vcf_targets_list absolute_path_to_GATK_jars\n"; exit;
}#print usage

my $infile=shift(@ARGV); chomp $infile;
open IN, $infile or die "cannot open bam list\n";

my $slurm_file=shift(@ARGV); chomp $slurm_file;

my $genome=shift(@ARGV); chomp $genome;

my $targets_list=shift(@ARGV); chomp $targets_list;
open TARGETS, $targets_list or die "cannot open mpileup targets list\n";

my $gatk_path=shift(@ARGV); chomp $gatk_path;

my $targets_string=<TARGETS>; chomp $targets_string;
$targets_string="$targets_string".",";
while(my $targets=<TARGETS>){
    chomp $targets;
    $targets_string="$targets_string".","."$targets";
}#collect targets
print "analyzing $targets_string\n";

my $counter=0; my $string=""; my $afterok="";
while(my $line=<IN>){
    chomp $line;
    print "submitting $line for realignment\n";
    $counter=$counter+1;
    my $file1=$line;

    my $command=qx(cat $slurm_file); chomp $command;

    my $dedup="$file1";

    my $targets="$file1".".list";

    my $string1="java -jar "."$gatk_path"."/GenomeAnalysisTK.jar -T RealignerTargetCreator -R $genome -I $dedup -o $targets";

    my $realigned=$dedup;
    $realigned=~ s/sorted.dedup/sorted.dedup.realigned/g;
    print "realigned $realigned\n";

    my $string2="java -jar "."$gatk_path"."/GenomeAnalysisTK.jar -T IndelRealigner -R $genome -I $dedup -targetIntervals $targets -o $realigned";

    $string="$string"." "."$realigned";

    open OUT, ">run_pre-samtools-bcftools_shell_"."$counter".".sh";
    print OUT "$command\n$string1\n$string2\n";
    my $script="run_pre-samtools-bcftools_shell_"."$counter".".sh";
    my $current=qx(sbatch $script | perl -p -e 's/Submitted batch job //g'); chomp $current;
    print "storing dependency job $current\n";

    if($counter eq 1){
	$afterok="$current";
    } else{
    $afterok="$afterok".","."$current";
    }#store jobs
    #print "$afterok\n";
}#submit all jobs

    my $command=qx(cat $slurm_file); chomp $command;
    my $bcf_file="$infile".".bcf";
    my $vcf_file="$infile".".vcf";
    my $string3="bcftools mpileup -r $targets_string -go $bcf_file -f $genome $string";

    my $string4="bcftools call -mvO v -o $vcf_file $bcf_file";

    open OUT, ">run_samtools-bcftools_shell_"."$counter".".sh";
    print OUT "$command\n$string3\n$string4\n";

    my $script="run_samtools-bcftools_shell_"."$counter".".sh";
    #print "--dependency=afterok:"."$afterok $script\n";
    system("sbatch --dependency=afterok:$afterok $script");
